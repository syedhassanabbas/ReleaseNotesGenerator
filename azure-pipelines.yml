name: $(Major).$(Minor).$(rev:r) 

resources:
  repositories:
    - repository: ReleaseNotesGenerator
      type: github
      endpoint: syedhassanabbas
      name: syedhassanabbas/ReleaseNotesGenerator
      ref: refs/heads/main     

trigger:
- main

pool: Default

variables:
- name: gittag
  value: 'v1.11.44' # version van be auto generated using $(GitVersion.NuGetVersion) or $(GitVersion.SemVer).

stages:

  - stage: build   
    jobs:
      - job: buildjob                   
        steps:
          - checkout: self
            persistCredentials: true
            fetchTags: "true"
            fetchDepth: "500"

          # - script: |
          #      git tag ${{ variables.gittag }} 
          #      git push origin ${{ variables.gittag }}
          #   workingDirectory: $(Build.SourcesDirectory)
          #   condition: eq(variables['Build.Reason'], 'PullRequest')    
            
          # - task: XplatGenerateReleaseNotes@4
          #   displayName: 'Release notes with template'
          #   inputs:
          #     templatefile: '$(System.DefaultWorkingDirectory)/build-handlebars-template.md'
          #     outputfile: '$(System.DefaultWorkingDirectory)/relasenotes.md'
          #     outputVariableName: 'outputvar'
          #     templateLocation: 'File'
          #     checkstages: false
          # - publish: '$(System.DefaultWorkingDirectory)/relasenotes.md'
          #   artifact: ReleaseNotes-build
          # - task: PublishMarkdownReports@1
          #   inputs:
          #     contentPath: '$(System.DefaultWorkingDirectory)'
          #     indexFile: 'relasenotes.md'
          #     headingId: buildnotes
          # - task: GitHubRelease@1
          #   inputs:
          #     gitHubConnection: 'github.com_syedhassanabbas'
          #     repositoryName: '$(Build.Repository.Name)' # string. Required. Repository. Default: $(Build.Repository.Name).
          #     action: 'create' # 'create' | 'edit' | 'delete'. Required. Action. Default: create.
          #     target: '$(Build.SourceVersion)' # string. Required when action = create || action = edit. Target. Default: $(Build.SourceVersion).
          #     tagSource: 'gitTag' # 'gitTag' | 'userSpecifiedTag'. Required when action = create. Tag source. Default: gitTag.
          #     tagPattern: 'v1.*' # string. Optional. Use when tagSource = gitTag. Tag Pattern. 
          #     tag: ${{ variables.gittag }} #'v1.11.26' # string. Required when action = edit || action = delete || tagSource = userSpecifiedTag. Tag. 
          #     title: ${{ variables.gittag }} #'v1.11.26' # string. Optional. Use when action = create || action = edit. Release title. 
          #     releaseNotesSource: 'filePath' # 'filePath' | 'inline'. Optional. Use when action = create || action = edit. Release notes source. Default: filePath.
          #     releaseNotesFilePath: '$(System.DefaultWorkingDirectory)/relasenotes.md' # string. Optional. Use when releaseNotesSource = filePath. Release notes file path.               
          #     #assets: '$(Build.ArtifactStagingDirectory)/*' # string. Optional. Use when action = create || action = edit. Assets. Default: $(Build.ArtifactStagingDirectory)/*.              
          #     isDraft: false # boolean. Optional. Use when action = create || action = edit. Draft release. Default: false.
          #     isPreRelease: false # boolean. Optional. Use when action = create || action = edit. Pre-release. Default: false.
          #     addChangeLog: true # boolean. Optional. Use when action = create || action = edit. Add changelog. Default: true.
          #   # Changelog configuration
          #     changeLogCompareToRelease: 'lastFullRelease' # 'lastFullRelease' | 'lastNonDraftRelease' | 'lastNonDraftReleaseByTag'. Required when addChangeLog = true. Compare to. Default: lastFullRelease.
          #     #changeLogCompareToReleaseTag: # string. Required when changeLogCompareToRelease = lastNonDraftReleaseByTag. Release Tag. 
          #     changeLogType: 'commitBased' # 'commitBased' | 'issueBased'. Required when addChangeLog = true. Changelog type. Default: commitBased.
          #     #changeLogLabels: '[{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]' # string. Optional. Use when changeLogType = issueBased. Categories. Default: [{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }].
          #     condition: eq(variables['Build.Reason'], 'PullRequest') 
  - stage: Devv
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        pool: Default  
        environment: 'Devv'
        strategy:
          # default deployment strategy 
          runOnce:
            deploy:
              steps:
              - script: echo my Test deployment
              - template: generate-wiki-docs.yml
                parameters:
                  workingDirectory: '$(Agent.BuildDirectory)'
                  SourcesDirectory: '$(Build.SourcesDirectory)'
                  environmentName: "Devv"      
                  gittag: ${{ variables.gittag }}
                  RepositoryName: '$(Build.Repository.Name)'
                  SourceVersion: '$(Build.SourceVersion)'      
      #   - task: WikiUpdaterTask@1
      #   displayName: 'Git based WIKI Updater'
      #   inputs:
      #     repo: 'syedhassanabbas/ReleaseNotesGenerator'
      #     filename: 'xPlatReleaseNotes/build-Windows-handlebars.md'
      #     dataIsFile: true
      #     sourceFile: '$(System.DefaultWorkingDirectory)inline.md'
      #     message: 'Update from Build'
      #     gitname: builduser
      #     gitemail: 'build@demo'
      #     useAgentToken: true

      # - deployment: DeployWeb
      #   displayName: deploy Web App
      #   pool: Default
      #   environment: 'Devv'
      #   strategy:
      #     # default deployment strategy 
      #     runOnce:
      #       deploy:
      #         steps:
      #         - script: echo my Devv deployment
  - stage: Test
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        pool: Default        
        environment: 'Test'
        strategy:
          # default deployment strategy 
          runOnce:
            deploy:
              steps:
              - script: echo my Test deployment
              - template: generate-wiki-docs.yml
                parameters:
                  workingDirectory: '$(Agent.BuildDirectory)'
                  SourcesDirectory: '$(Build.SourcesDirectory)'
                  environmentName: "Test"
                  gittag: ${{ variables.gittag }}
                  RepositoryName: '$(Build.Repository.Name)'
                  SourceVersion: '$(Build.SourceVersion)'
  - stage: Stag
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        pool: Default       
        environment: 'Stag'
        strategy:
          # default deployment strategy 
          runOnce:
            deploy:
              steps:
              - script: echo my Test deployment
              - template: generate-wiki-docs.yml
                parameters:
                  workingDirectory: '$(Agent.BuildDirectory)'
                  SourcesDirectory: '$(Build.SourcesDirectory)'
                  environmentName: "stag"
                  gittag: ${{ variables.gittag }}
                  RepositoryName: '$(Build.Repository.Name)'
                  SourceVersion: '$(Build.SourceVersion)'
  - stage: Prod
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        pool: Default  
        environment: 'Prod'
        strategy:
          # default deployment strategy 
          runOnce:
            deploy:
              steps:
              - script: echo my Prod deployment
              - template: generate-wiki-docs.yml
                parameters:
                  workingDirectory: '$(Agent.BuildDirectory)'
                  SourcesDirectory: '$(Build.SourcesDirectory)'
                  environmentName: "Prod"
                  gittag: ${{ variables.gittag }}
                  RepositoryName: '$(Build.Repository.Name)'
                  SourceVersion: '$(Build.SourceVersion)'
