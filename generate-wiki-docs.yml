parameters:
- name: workingDirectory    
  type: string
- name: SourcesDirectory    
  type: string
    
# - name: wikiFilename           
#   type: string
# - name: repo                   
#   type: string
# - name: GitName                   
#   type: string
# - name: GitEmail                   
#   type: string
# - name: GitHubPat                   
#   type: string
# - name: UserName
#   type: string
- name: environmentName
  type: string
- name: gittag
  type: string
- name: RepositoryName
  type: string
- name: SourceVersion
  type: string

steps: 
- task: WorkItemUpdater@3
  displayName: 'WorkItem Updater'
  inputs:
    workitemsSource: 'Build'
    workItemType: 'User Story,Bug'
    workItemState: 'Active'
    workItemKanbanState: 'Ready for Dev'
    comment: 'Deployed to Devv'
    addTags: 'Deployed To Dev'
    allWorkItemsSinceLastRelease: true
    linkBuild: true
#     workItemDone
# - bash: | # Access Token should need Build Read, Work Item Read & Write, Member Entitlement Management Read
#     curl -u HassanAbbas@ShahSoftLTD.onmicrosoft.com:6uqlc4eltcujrp7x6ilaviphnlt3zacshjspw73xl7jp3khsxcda https://dev.azure.com/HassanAbbasShahSoftLTD/Deployment%20Approvals%20Demo/_apis/build/builds/$(build.buildId)/workitems?api-version=6.0
#     while IFS=$"\n" read -r c; do
#       wid=$(echo $c | tr -dc '0-9')
#       echo
#       echo Posting status to work item: $wid
#       echo
#       curl -u HassanAbbas@ShahSoftLTD.onmicrosoft.com:6uqlc4eltcujrp7x6ilaviphnlt3zacshjspw73xl7jp3khsxcda https://dev.azure.com/HassanAbbasShahSoftLTD/Deployment%20Approvals%20Demo/_apis/wit/workItems/$wid/comments?api-version=6.0-preview.3 -X POST --data '{"text": "Build $(Build.BuildNumber) completed with status: $(Agent.JobStatus)"}' -H 'Content-Type: application/json'
#       echo
#     done
#   displayName: 'Post status to work items'
#   condition: always()
- task: XplatGenerateReleaseNotes@4
  displayName: 'Generate Release Notes'
  inputs:
    outputfile: '${{parameters.workingDirectory}}/inline-${{parameters.environmentName}}.md'
    outputVariableName: OutputText
    # checkstages: true
    checkStage: true
    overrideStageName: ${{parameters.environmentName}}    
    templateLocation: InLine
    inlinetemplate: |
      **Build Number**: {{buildDetails.id}}
      **Build Trigger PR Number**: {{lookup buildDetails.triggerInfo 'pr.number'}}
      # Global list of WI ({{workItems.length}})
      {{#forEach workItems}}
      {{#if isFirst}}## Associated Work Items (only shown if  WI) {{/if}}
      *  **{{this.id}}**  {{lookup this.fields 'System.Title'}}
        - **WIT** {{lookup this.fields 'System.WorkItemType'}}
        - **Tags** {{lookup this.fields 'System.Tags'}}
      {{/forEach}}
      # Global list of CS ({{commits.length}})
      {{#forEach commits}}
      {{#if isFirst}}### Associated commits  (only shown if CS) {{/if}}
      * ** ID{{this.id}}**
        -  **Message:** {{this.message}}
        -  **Commited by:** {{this.author.displayName}}
      {{/forEach}}       
- publish: '${{parameters.workingDirectory}}/inline-${{parameters.environmentName}}.md'
  artifact: ReleaseNotes-${{parameters.environmentName}}
- task: PublishMarkdownReports@1
  inputs:
    contentPath: '${{parameters.workingDirectory}}'
    indexFile: 'inline-${{parameters.environmentName}}.md'
    headingId: ${{parameters.environmentName}}releasenotes
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '${{parameters.workingDirectory}}/inline-${{parameters.environmentName}}.md'
    artifactType: 'pipeline'
    artifactName: ReleaseNotes-${{parameters.environmentName}}
# - script: |
#      git tag ${{parameters.gittag}}-${{parameters.environmentName}}
#      git push origin ${{parameters.gittag}}-${{parameters.environmentName}}
#   workingDirectory: '${{parameters.SourcesDirectory}}'
#   condition: ne(variables['Build.Reason'], 'PullRequest') 
  
# - task: GitHubRelease@1
#   inputs:
#     gitHubConnection: 'github.com_syedhassanabbas'
#     repositoryName: ${{parameters.RepositoryName}}  # string. Required. Repository. Default: $(Build.Repository.Name).
#     action: 'create' # 'create' | 'edit' | 'delete'. Required. Action. Default: create.
#     target: ${{parameters.SourceVersion}}  # string. Required when action = create || action = edit. Target. Default: $(Build.SourceVersion).
#     tagSource: 'gitTag' # 'gitTag' | 'userSpecifiedTag'. Required when action = create. Tag source. Default: gitTag.
#     tagPattern: 'v1.*' # string. Optional. Use when tagSource = gitTag. Tag Pattern. 
#     tag: ${{parameters.gittag}} #'v1.11.26' # string. Required when action = edit || action = delete || tagSource = userSpecifiedTag. Tag. 
#     title: ${{parameters.gittag}} #'v1.11.26' # string. Optional. Use when action = create || action = edit. Release title. 
#     releaseNotesSource: 'filePath' # 'filePath' | 'inline'. Optional. Use when action = create || action = edit. Release notes source. Default: filePath.
#     releaseNotesFilePath: '${{parameters.workingDirectory}}/inline-${{parameters.environmentName}}.md' # string. Optional. Use when releaseNotesSource = filePath. Release notes file path.               
#     #assets: '$(Build.ArtifactStagingDirectory)/*' # string. Optional. Use when action = create || action = edit. Assets. Default: $(Build.ArtifactStagingDirectory)/*.              
#     isDraft: false # boolean. Optional. Use when action = create || action = edit. Draft release. Default: false.
#     isPreRelease: false # boolean. Optional. Use when action = create || action = edit. Pre-release. Default: false.
#     addChangeLog: true # boolean. Optional. Use when action = create || action = edit. Add changelog. Default: true.
#   # Changelog configuration
#     changeLogCompareToRelease: 'lastFullRelease' # 'lastFullRelease' | 'lastNonDraftRelease' | 'lastNonDraftReleaseByTag'. Required when addChangeLog = true. Compare to. Default: lastFullRelease.
#     #changeLogCompareToReleaseTag: # string. Required when changeLogCompareToRelease = lastNonDraftReleaseByTag. Release Tag. 
#     changeLogType: 'commitBased' # 'commitBased' | 'issueBased'. Required when addChangeLog = true. Changelog type. Default: commitBased.
#     #changeLogLabels: '[{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }]' # string. Optional. Use when changeLogType = issueBased. Categories. Default: [{ "label" : "bug", "displayName" : "Bugs", "state" : "closed" }].
#     condition: eq(variables['Build.Reason'], 'PullRequest') 

# - task: richardfennellBM.BM-VSTS-YAMLGenerator-DEV.YamlGeneratorTask.GenerateYAMLTask@2
#   displayName: 'YAML Documentation Generator'
#   inputs:
#     inDir: '${{parameters.workingDirectory}}'     
#     outDir: '${{parameters.workingDirectory}}/out'
#     filePrefix: '${{parameters.wikiFilename}}'    
#     copyReadme: true

# - task: richardfennellBM.BM-VSTS-WIKIUpdater-Tasks-DEV.WikiUpdaterTask.WikiUpdaterTask@2
#   displayName: 'Git based WIKI Updater - Readme'
#   inputs:
#     repo: '${{parameters.repo}}'
#     filename: '${{parameters.wikiFilename}}.md'
#     dataIsFile: true
#     sourceFile: '${{parameters.workingDirectory}}/out/${{parameters.wikiFilename}}.md'
#     message: 'Update the ${{parameters.wikiFilename}} Release Notes Readme'
#     gitname: '${{parameters.GitName}}'
#     gitemail: '${{parameters.GitEmail}}'
#     user: '${{parameters.UserName}}'
#     password: '${{parameters.GitHubPat}}'

# - task: richardfennellBM.BM-VSTS-WIKIUpdater-Tasks-DEV.WikiUpdaterTask.WikiUpdaterTask@2
#   displayName: 'Git based WIKI Updater - YAML '
#   inputs:
#     repo: '${{parameters.repo}}'
#     filename: '${{parameters.wikiFilename}}-YAML.md'
#     dataIsFile: true
#     sourceFile: '${{parameters.workingDirectory}}/out/${{parameters.wikiFilename}}-YAML.md'
#     message: 'Update the ${{parameters.wikiFilename}} Release Notes YAML'
#     gitname: '${{parameters.GitName}}'
#     gitemail: '${{parameters.GitEmail}}'
#     user: '${{parameters.UserName}}'
#     password: '${{parameters.GitHubPat}}'
